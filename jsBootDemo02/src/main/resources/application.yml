spring:
  datasource:
# driverClassName - вказує, який тип БД використовємо. Тут - h2. Для Postgres мав би вигляд rg.postgresql.Driver(я не перевіряв) 
# url — це місце, де розташовується база.
# jdbc:h2:mem:myDB; - вказує, що в пам'яті проекту, тобто при рестарті програми база буде створена заново.
# jdbc:h2:~/myDB; - в теорії кажуть, що в папці проекту. Але в лінуксі в мене створило в /home/kiranatos/myDB.mv.db(+myDB.trace.db)
# див також jsJDBC/ifiles/SQL.xlsx вкладка H2
# jdbc:postgresql://localhost:5432/mydb - для Postgres (я не перевіряв)

    driverClassName: org.h2.Driver
    url: jdbc:h2:mem:myDB;
    username: sa
    password:
        
# h2:console:enabled:true - вказує, що необхідно включити консоль H2, яка дозволяє переглядати та редагувати дані в БД.
# За замовчуванням, консоль H2 вимкнена в Spring, тому для її включення необхідно 
# встановити властивість "spring.h2.console.enabled" у значення "true".
# Під час запуску проекта з ввімкненою властивістю, можна отримати доступ до консолі H2 
# з допомогою http://localhost:port/h2-console, де "port" - це номер порту вашого додатка. 
# Ввівши в JDBC URL: jdbc:h2:mem:myDB - можна отримати доступ до БД, яка знаходиться в пам'яті, а не на диску.
# Важливо пам'ятати, що включення консолі H2 може створювати потенційні проблеми безпеки, 
# тому вона повинна бути включена лише в тестових або розробницьких середовищах.
    h2:
      console:
        enabled: true
  jpa:
# hibernate.ddl-auto: каже, що робити зі схемою бази під час перезапуску програми. 
# create - створювати заново, update - доповнювати базу, create-drop - очищати під час запуску.
    hibernate.ddl-auto: create
# spring.jpa.generate-ddl=true - вказує, що необхідно автоматично генерувати SQL-скрипти для створення таблиць БД з допомогою JPA.
# Для цього Spring скористається інформацією, яка знаходиться в анотаціях JPA, які розміщені над класами Java-об'єктів, що представляють дані.
    generate-ddl: true
# Коли властивість spring.jpa.show-sql встановлена в true, Spring буде виводити 
# SQL-запити у консоль або лог-файли додатка. За замовчуванням встановлена як false.
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        
        
# В javarush напсано: Якщо видалити application.yml, і запустити проект, то він 
# буде працювати як і раніше. Це відбувається тому, що Spring сам сконфігурувався
# на дефолних налаштуваннях. (Я це не перевіряв, здогад: можливо @SpringBootApplication[@EnableAutoConfiguration] має якесь відношення до цього)